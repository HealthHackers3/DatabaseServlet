Index: src/main/java/api/debug/getRefreshAllTables.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package api.debug;\r\n\r\nimport api.interfaces.apiCommandHandler;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.sql.Statement;\r\n\r\npublic class getRefreshAllTables implements apiCommandHandler {\r\n\r\n    public getRefreshAllTables() {\r\n    }\r\n\r\n    @Override\r\n    public void handle(HttpServletRequest req, HttpServletResponse resp, Statement s) throws Exception {\r\n        try {\r\n            // Step 1: Drop all tables in reverse order of dependencies\r\n            String dropAllObjects =\r\n                    \"DO $$ \" +\r\n                            \"DECLARE \" +\r\n                            \"    rec RECORD; \" +\r\n                            \"BEGIN\" +\r\n                            \"    FOR rec IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP \" +\r\n                            \"        EXECUTE 'DROP TABLE IF EXISTS \\\"' || rec.tablename || '\\\" CASCADE;'; \" +\r\n                            \"    END LOOP;\" +\r\n                            \"    FOR rec IN (SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'public') LOOP \" +\r\n                            \"        EXECUTE 'DROP SEQUENCE IF EXISTS \\\"' || rec.sequence_name || '\\\" CASCADE;'; \" +\r\n                            \"    END LOOP; \" +\r\n                            \"END $$;\";\r\n\r\n\r\n            s.execute(dropAllObjects);\r\n\r\n            // Step 2: Recreate tables\r\n            s.execute(\"CREATE TABLE Lusers (\" +\r\n                    \"user_id SERIAL PRIMARY KEY,\" +\r\n                    \"username VARCHAR(100) UNIQUE NOT NULL,\" +\r\n                    \"password TEXT NOT NULL,\" +\r\n                    \"email VARCHAR(255) UNIQUE NOT NULL,\" +\r\n                    \"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lcategories (\" +\r\n                    \"category_id SERIAL PRIMARY KEY,\" +\r\n                    \"category_name VARCHAR(255) NOT NULL UNIQUE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lcell_types (\" +\r\n                    \"cell_type_id SERIAL PRIMARY KEY,\" +\r\n                    \"cell_type_name VARCHAR(255) NOT NULL UNIQUE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Limage_modalities (\" +\r\n                    \"image_modality_id SERIAL PRIMARY KEY,\" +\r\n                    \"image_modality_name VARCHAR(255) NOT NULL UNIQUE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lposts (\" +\r\n                    \"post_id SERIAL PRIMARY KEY,\" +\r\n                    \"poster_id INT NOT NULL,\" +\r\n                    \"post_name VARCHAR(100) UNIQUE NOT NULL,\" +\r\n                    \"category_id INT NOT NULL,\" +\r\n                    \"cell_type_id INT NOT NULL,\" +\r\n                    \"image_modality_id INT NOT NULL,\" +\r\n                    \"category_user_picked VARCHAR(100) DEFAULT NULL,\" +\r\n                    \"cell_type_user_picked VARCHAR(100) DEFAULT NULL,\" +\r\n                    \"image_modality_user_picked VARCHAR(100) DEFAULT NULL,\" +\r\n                    \"description TEXT,\" +\r\n                    \"likes INT DEFAULT 0 CHECK (likes >= 0),\" +\r\n                    \"upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\" +\r\n                    \"FOREIGN KEY (poster_id) REFERENCES Lusers(user_id) ON DELETE CASCADE,\" +\r\n                    \"FOREIGN KEY (category_id) REFERENCES Lcategories(category_id) ON DELETE CASCADE,\" +\r\n                    \"FOREIGN KEY (cell_type_id) REFERENCES Lcell_types(cell_type_id) ON DELETE CASCADE,\" +\r\n                    \"FOREIGN KEY (image_modality_id) REFERENCES Limage_modalities(image_modality_id) ON DELETE CASCADE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lpost_images (\" +\r\n                    \"image_id SERIAL PRIMARY KEY,\" +\r\n                    \"post_id INT NOT NULL,\" +\r\n                    \"order_index INT NOT NULL,\" +\r\n                    \"image_file_name TEXT NOT NULL,\" +\r\n                    \"cell_count INT DEFAULT 0 CHECK (cell_count >= 0),\" +\r\n                    \"cell_dimensions_y INT DEFAULT 0 CHECK (cell_dimensions_y >= 0),\" +\r\n                    \"cell_dimensions_x INT DEFAULT 0 CHECK (cell_dimensions_x >= 0),\" +\r\n                    \"cell_density INT DEFAULT 0 CHECK (cell_density >= 0),\" +\r\n                    \"image_path TEXT,\" +\r\n                    \"FOREIGN KEY (post_id) REFERENCES Lposts(post_id) ON DELETE CASCADE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lpost_images_thumbnails (\" +\r\n                    \"thumbnail_id SERIAL PRIMARY KEY,\" +\r\n                    \"post_id INT NOT NULL,\" +\r\n                    \"ref_image_id INT NOT NULL,\" +\r\n                    \"image_path TEXT NOT NULL,\" +\r\n                    \"FOREIGN KEY (post_id) REFERENCES Lposts(post_id) ON DELETE CASCADE,\" +\r\n                    \"FOREIGN KEY (ref_image_id) REFERENCES Lpost_images(image_id)\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lpost_likes (\" +\r\n                    \"user_id INT NOT NULL,\" +\r\n                    \"post_id INT NOT NULL,\" +\r\n                    \"UNIQUE (user_id, post_id),\" +\r\n                    \"PRIMARY KEY(user_id, post_id),\" +\r\n                    \"FOREIGN KEY (post_id) REFERENCES Lposts(post_id) ON DELETE CASCADE,\" +\r\n                    \"FOREIGN KEY (user_id) REFERENCES Lusers(user_id) ON DELETE CASCADE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Luser_profile_pics (\" +\r\n                    \"user_id INT PRIMARY KEY,\" +\r\n                    \"profile_pic BYTEA NOT NULL,\" +\r\n                    \"FOREIGN KEY (user_id) REFERENCES Lusers(user_id) ON DELETE CASCADE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Ltags (\" +\r\n                    \"tag_id SERIAL PRIMARY KEY,\" +\r\n                    \"tag_name VARCHAR(255) NOT NULL UNIQUE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"CREATE TABLE Lsessions (\" +\r\n                    \"session_id SERIAL PRIMARY KEY,\" +\r\n                    \"user_id INT NOT NULL,\" +\r\n                    \"session_token TEXT NOT NULL UNIQUE,\" +\r\n                    \"expires_at TIMESTAMP NOT NULL,\" +\r\n                    \"FOREIGN KEY (user_id) REFERENCES Lusers(user_id) ON DELETE CASCADE\" +\r\n                    \");\");\r\n\r\n            s.execute(\"DO $$ DECLARE \" +\r\n                    \"category_list TEXT := 'Other,Eukarya,Bacteria,Archaea,Viruses,Prions';\" +\r\n                    \"category_item TEXT; \" +\r\n                    \"BEGIN \" +\r\n                    \"FOR category_item IN SELECT unnest(string_to_array(category_list, ',')) LOOP \" +\r\n                    \"INSERT INTO Lcategories (category_name) VALUES (category_item) \" +\r\n                    \"ON CONFLICT (category_name) DO NOTHING; \" +\r\n                    \"END LOOP; \" +\r\n                    \"END $$;\");\r\n\r\n            s.execute(\"DO $$ DECLARE \" +\r\n                    \"cell_type_list TEXT := 'Other,Adipocyte,Basophil,Cardiomyocyte,Chondrocyte,Erythrocyte,Fibroblast,Hepatocyte,Keratinocyte,Langerhans cell,Macrophage,Mast cell,Melanocyte,Monocyte,Myocyte(skeletal),Myocyte(smooth),Myocyte(cardiac),Neutrophil,Osteoblast,Osteoclast,Pancreatic beta cell,Platelet,Schwann cell,T-cell,B-cell,Natural killer cell,Spermatocyte,Oocyte,Retinal ganglion cell,Cone cell,Rod cell,Ependymal cell,Endothelial cell,Goblet cell,Granulocyte,Thrombocyte,Lymphocyte,Microglial cell,Satellite cell,Parenchyma cell,Collenchyma cell,Sclerenchyma cell,Guard cell,Companion cell,Sieve-tube element,Tracheid,Vessel element,Xylem fiber,Phloem fiber,Cork cell,Epidermal cell,Root hair cell,Palisade mesophyll cell,Spongy mesophyll cell,Chlorenchyma cell,Endodermal cell,Meristematic cell,Coccus,Bacillus,Spirillum,Spirochete,Vibrio,Filamentous bacteria,Actinomycete,Protist(amoeboid),Protist(flagellate),Protist(ciliate),Fungi(hyphal cell),Fungi(yeast cell),Fungi(spore-forming cell),DNA virus,RNA virus,Retrovirus,Bacteriophage,Lipid-enveloped virus,Non-enveloped virus,Icosahedral virus,Helical virus,Complex virus,Satellite virus,Prion-like particles,Archaea(methanogen),Archaea(halophile),Alveolar cell,Intestinal enterocyte,Bundle sheath cell,Transfer cell,Reproductive cell(egg cell),Reproductive cell(pollen cell),Oligodendrocyte,Astrocyte';\" +\r\n                    \"cell_type_item TEXT; \" +\r\n                    \"BEGIN \" +\r\n                    \"FOR cell_type_item IN SELECT unnest(string_to_array(cell_type_list, ',')) LOOP \" +\r\n                    \"INSERT INTO Lcell_types (cell_type_name) VALUES (cell_type_item) \" +\r\n                    \"ON CONFLICT (cell_type_name) DO NOTHING; \" +\r\n                    \"END LOOP; \" +\r\n                    \"END $$;\");\r\n\r\n            s.execute(\"DO $$ DECLARE \" +\r\n                    \"image_modality_list TEXT := 'Other, Fluorescence microscopy (live-cell),Fluorescence microscopy (fixed-cell),Confocal microscopy,Two-photon microscopy,Super-resolution microscopy (STED),Super-resolution microscopy (PALM/STORM),Phase-contrast microscopy,Differential interference contrast (DIC) microscopy,Raman microscopy,Fluorescence in situ hybridization (FISH),Live-cell imaging (time-lapse),High-content screening imaging,Fluorescent lifetime imaging (FLIM),Total internal reflection fluorescence (TIRF) microscopy,Structured illumination microscopy (SIM),Light-sheet microscopy,Spinning disk confocal microscopy,Widefield fluorescence microscopy,Multiphoton microscopy,Optical coherence tomography (OCT),Electron microscopy (SEM),Electron microscopy (TEM),Cryo-electron microscopy (Cryo-EM),Dynamic light scattering (DLS),Flow cytometry (imaging),Mass cytometry (imaging),Label-free microscopy (holographic),Atomic force microscopy (AFM),Spectral imaging (hyperspectral)';\" +\r\n                    \"image_modality_item TEXT; \" +\r\n                    \"BEGIN \" +\r\n                    \"FOR image_modality_item IN SELECT unnest(string_to_array(image_modality_list, ',')) LOOP \" +\r\n                    \"INSERT INTO Limage_modalities(image_modality_name) VALUES (image_modality_item) \" +\r\n                    \"ON CONFLICT (image_modality_name) DO NOTHING; \" +\r\n                    \"END LOOP; \" +\r\n                    \"END $$;\");\r\n\r\n            // Success response\r\n            resp.setContentType(\"application/json\");\r\n            resp.getWriter().write(\"{\\\"message\\\": \\\"Tables reset successfully\\\"}\");\r\n        } catch (Exception e) {\r\n            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n            resp.getWriter().write(\"{\\\"error\\\": \\\"Failed to reset tables: \" + e.getMessage() + \"\\\"}\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/api/debug/getRefreshAllTables.java b/src/main/java/api/debug/getRefreshAllTables.java
--- a/src/main/java/api/debug/getRefreshAllTables.java	(revision bb7d34b97429031261ea6331394c8155a15e3d52)
+++ b/src/main/java/api/debug/getRefreshAllTables.java	(date 1736693484759)
@@ -145,7 +145,7 @@
                     "END $$;");
 
             s.execute("DO $$ DECLARE " +
-                    "image_modality_list TEXT := 'Other, Fluorescence microscopy (live-cell),Fluorescence microscopy (fixed-cell),Confocal microscopy,Two-photon microscopy,Super-resolution microscopy (STED),Super-resolution microscopy (PALM/STORM),Phase-contrast microscopy,Differential interference contrast (DIC) microscopy,Raman microscopy,Fluorescence in situ hybridization (FISH),Live-cell imaging (time-lapse),High-content screening imaging,Fluorescent lifetime imaging (FLIM),Total internal reflection fluorescence (TIRF) microscopy,Structured illumination microscopy (SIM),Light-sheet microscopy,Spinning disk confocal microscopy,Widefield fluorescence microscopy,Multiphoton microscopy,Optical coherence tomography (OCT),Electron microscopy (SEM),Electron microscopy (TEM),Cryo-electron microscopy (Cryo-EM),Dynamic light scattering (DLS),Flow cytometry (imaging),Mass cytometry (imaging),Label-free microscopy (holographic),Atomic force microscopy (AFM),Spectral imaging (hyperspectral)';" +
+                    "image_modality_list TEXT := 'Other,Fluorescence microscopy (live-cell),Fluorescence microscopy (fixed-cell),Confocal microscopy,Two-photon microscopy,Super-resolution microscopy (STED),Super-resolution microscopy (PALM/STORM),Phase-contrast microscopy,Differential interference contrast (DIC) microscopy,Raman microscopy,Fluorescence in situ hybridization (FISH),Live-cell imaging (time-lapse),High-content screening imaging,Fluorescent lifetime imaging (FLIM),Total internal reflection fluorescence (TIRF) microscopy,Structured illumination microscopy (SIM),Light-sheet microscopy,Spinning disk confocal microscopy,Widefield fluorescence microscopy,Multiphoton microscopy,Optical coherence tomography (OCT),Electron microscopy (SEM),Electron microscopy (TEM),Cryo-electron microscopy (Cryo-EM),Dynamic light scattering (DLS),Flow cytometry (imaging),Mass cytometry (imaging),Label-free microscopy (holographic),Atomic force microscopy (AFM),Spectral imaging (hyperspectral)';" +
                     "image_modality_item TEXT; " +
                     "BEGIN " +
                     "FOR image_modality_item IN SELECT unnest(string_to_array(image_modality_list, ',')) LOOP " +
